<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>使用Frp实现内网穿透</title>
      <link href="/2018/09/05/T-remote-0/"/>
      <url>/2018/09/05/T-remote-0/</url>
      <content type="html"><![CDATA[<p>因为需要在公网访问本地电脑上的数据进行测试，公司的宽带没有公网IP，不能直接用端口转发，所以只能自己动手搞内网穿透了，看了一下使用ngrok和frp两种方式的比较多，frp配置比较简单，就它了</p><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>需要一台有公网IP的服务器来作为服务端，然后自己的内网电脑作为客户端，二者之间建立通道实现内网穿透<br>下载地址:  <a href="https://github.com/fatedier/frp/releases" target="_blank" rel="noopener">https://github.com/fatedier/frp/releases</a><br>选择相应的版本，我的服务端是Ubuntu，客户端是Win10，所以分别下载linux_amd64和windows_amd64</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h4><p>解压  <code>tar -xzvf frp_0.21.0_linux_amd64.tar.gz</code><br><img src="https://ws1.sinaimg.cn/large/ba9cece1gy1fuyi4abc1pj20ct04vmx6.jpg" alt=""><br>frpc开头的是C端文件，frps开头的是S端文件，还有一个证书文件<br>frps.ini是服务端配置文件，无需修改，默认端口是7000<br>直接运行frps <code>./frps -c ./frps.ini</code> 服务端就ok了<br><img src="https://ws1.sinaimg.cn/large/ba9cece1gy1fuyibsk0aoj20ge01hdfo.jpg" alt=""></p><h4 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h4><a id="more"></a><p>解压，和服务端一样的文件，修改客户端配置文件frpc.ini<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[common]</span><br><span class="line">server_addr = xx.xx.xx.xx</span><br><span class="line">server_port = 7000</span><br><span class="line"></span><br><span class="line">[otc]</span><br><span class="line">type = tcp   </span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line">local_port = 8332</span><br><span class="line">remote_port = 8332</span><br></pre></td></tr></table></figure></p><p>server_addr和server_port：服务端IP地址和端口<br>otc：通道的名字<br>type：连接类型<br>local_ip：本地服务的地址<br>local_port = 8332：本地服务的端口<br>remote_port = 8332：服务端的端口</p><p>打开cmd，先把frpc.exe拖进去 加上-c 再把frpc.ini拖进去<br><img src="https://ws1.sinaimg.cn/large/ba9cece1gy1fuyj7x7bx6j20kq03vjrf.jpg" alt=""><br>搞定，访问服务端的8332端口，就等于访问客户端的8332端口了</p>]]></content>
      
      <categories>
          
          <category> 工具 </category>
          
          <category> 远程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网穿透 </tag>
            
            <tag> Frp </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>软件记录</title>
      <link href="/2018/09/01/T-software-0/"/>
      <url>/2018/09/01/T-software-0/</url>
      <content type="html"><![CDATA[<p>Everything</p>]]></content>
      
      <categories>
          
          <category> 工具 </category>
          
          <category> 软件 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>插件记录</title>
      <link href="/2018/09/01/T-plugin-0/"/>
      <url>/2018/09/01/T-plugin-0/</url>
      <content type="html"><![CDATA[<h3 id="新浪微博图床"><a href="#新浪微博图床" class="headerlink" title="新浪微博图床"></a>新浪微博图床</h3>]]></content>
      
      <categories>
          
          <category> 工具 </category>
          
          <category> 插件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图床 </tag>
            
            <tag> 浏览器插件 </tag>
            
            <tag> Chrome </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>App记录</title>
      <link href="/2018/09/01/T-app-0/"/>
      <url>/2018/09/01/T-app-0/</url>
      <content type="html"><![CDATA[]]></content>
      
      <categories>
          
          <category> 工具 </category>
          
          <category> App </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> App </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>比特币核心钱包RPC配置</title>
      <link href="/2018/08/14/K-coin-0/"/>
      <url>/2018/08/14/K-coin-0/</url>
      <content type="html"><![CDATA[<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p><a href="https://bitcoin.org/zh_CN/choose-your-wallet" target="_blank" rel="noopener">https://bitcoin.org/zh_CN/choose-your-wallet</a><br>选择Bitcoin Core以及需要的版本，然后点安装，下载Bitcoin Core<br>这里以windows版本为例</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>无脑下一步就行了，截止到目前，所需要硬盘容量为200G<br>安装完了运行，就会自动同步区块了，很慢，毕竟要下载所有历史数据，我同步了三天，取决于网络<br>如果是linux系统，进入bin文件夹执行<br><code>./bitcoind --datadir=指定数据存放路径 --daemon</code><br>开启服务，不指定路径的话程序默认在 /当前用户/.bitcoin 保存数据 </p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>设置——选项——打开配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server=1</span><br><span class="line"></span><br><span class="line">rpcuser=xxx</span><br><span class="line"></span><br><span class="line">rpcpassword=xxx</span><br><span class="line"></span><br><span class="line">rpcallowip=192.168.2.1</span><br><span class="line"></span><br><span class="line">rpcport=8332</span><br></pre></td></tr></table></figure><p>linux需要手动在数据文件夹创建bitcoin.conf配置文件</p><p>参数说明：<br><a id="more"></a><br>server：RPC服务 1打开 0关闭</p><p>rpcuser：RPC用户名</p><p>rpcpassword：RPC密码</p><p>rpcallowip：允许来自指定ip的连接 </p><p>rpcport：RPC监听端口 默认为8332  </p><p>保存并重启钱包，打开浏览器，访问<a href="http://127.0.0.1:8332" target="_blank" rel="noopener">127.0.0.1:8332</a><br>or  <code>curl 127.0.0.1:8332</code><br>提示 JSONRPC server handles only POST requests<br>就说明RPC服务已经运行起来了</p><p>当然可以再测试一下远程调用<br><code>curl -X POST  rpc_server_ip:8332 -u user:passwd -d &#39;{&quot;method&quot;: &quot;getnetworkinfo&quot;}&#39;</code></p>]]></content>
      
      <categories>
          
          <category> 知识 </category>
          
          <category> 数字货币 </category>
          
          <category> Bitcoin </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bitcoin </tag>
            
            <tag> RPC </tag>
            
            <tag> 区块链 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>leetcode刷题之旅</title>
      <link href="/2018/07/01/K-algorithm-0/"/>
      <url>/2018/07/01/K-algorithm-0/</url>
      <content type="html"><![CDATA[]]></content>
      
      <categories>
          
          <category> 知识 </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Leetcode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>远程开机和远程桌面</title>
      <link href="/2018/06/20/T-remote-1/"/>
      <url>/2018/06/20/T-remote-1/</url>
      <content type="html"><![CDATA[<p>有时候需要在外面访问家里的电脑或者在家里访问公司的电脑，那么远程桌面就需要搞起来，一般有以下三种情形</p><ul><li>无路由器管理权限</li><li>有路由器管理权限，有公网IP</li><li>有路由器管理权限，无公网IP</li></ul><h3 id="无路由器管理权限"><a href="#无路由器管理权限" class="headerlink" title="无路由器管理权限"></a>无路由器管理权限</h3><p>这种情况无法远程开机，也不能使用微软自带的远程桌面，老老实实的使用TeamViewer这款软件吧，公司电脑挂着它，不关机，在别的地方可以远程访问，手机上下载同名APP也可行<br>优点：简单方便，生态完善，远程帮助朋(妹)友(子)解决电脑问题的神器<br>缺点：不能远程开机，有时候网速不快，不能开高清画质，并有可能会被误认为是商业用途而禁止使用</p><p>以下两种情况的前提是路由器桥接光猫，这样路由器的wan口就是直连外网的，中间就少了一层网络<br>如果不是的，请先自行解决，<strong><a href="https://www.baidu.com" target="_blank" rel="noopener">破解电信光猫改路由器为桥接</a></strong></p><h3 id="有路由器管理权限，有公网IP"><a href="#有路由器管理权限，有公网IP" class="headerlink" title="有路由器管理权限，有公网IP"></a>有路由器管理权限，有公网IP</h3><p>这种情况就可以远程开机和使用Win10自带的远程桌面了，远程开机的前提是主板和网卡要支持，现在的设备一般都支持的，到BIOS里设置允许网络唤醒，然后网卡的配置里，以下这两个地方也要开启，让我很不解的是，不勾选允许关闭此设备以节约电源，就不能勾选允许此设备唤醒计算机了，emmm…只有我觉得这里是很矛盾的吗，不过我也管不着，这么选就对了…<br><img src="https://ws1.sinaimg.cn/large/ba9cece1gy1fvd3a0ebftj20cm0cbglv.jpg" alt=""><br><img src="https://ws1.sinaimg.cn/large/ba9cece1gy1fvd3aicsw9j20cl0773yj.jpg" alt=""></p><h4 id="路由器已刷机"><a href="#路由器已刷机" class="headerlink" title="路由器已刷机"></a>路由器已刷机</h4><p>热门机型的路由器大神们已经把需要的功能都集成打包好了，只需要刷入魔改后的系统即可享用，一劳永逸，例如我这台K2P刷了官改版，完全够日常使用了，当然还有更强大的OpenWrt等系统，看个人需求了<br>这里用到的有<strong>远程管理</strong>，<strong>端口转发</strong>，<strong>网络唤醒</strong>这三个功能<br><a id="more"></a><br><img src="https://ws1.sinaimg.cn/large/ba9cece1gy1fvd3bkh38ej20qp0mpmyq.jpg" alt=""></p><p><strong>远程管理</strong>，就是开放一个端口，使得外网可以访问这个路由器的管理页面，也可以用app来管理，不过刷过机了，官方app自带的功能就感觉有点不足了</p><p><img src="https://ws1.sinaimg.cn/large/ba9cece1gy1fvd3f7uylgj20hg0b8gll.jpg" alt=""></p><p><strong>端口转发</strong><br><strong>网络唤醒的端口：7 </strong><br>如果是直接在网页里面唤醒的方式，就用不着转发端口7，如果想要试一下发送唤醒包的方式来开机的，就需要转发，这里会涉及到一些windows系统中网卡的配置，Wake on Lan服务等，可以先在局域网试，可以唤醒了再用外网来尝试<br><strong>远程桌面的端口：3389</strong><br>Win10的远程桌面RDP协议使用的端口，当然也可以远程开机后就直接使用TeamViewer<br><strong>远程SSH的端口：22</strong><br>这里是转发路由器外网22端口到自己的局域网IP，这样就可以远程SSH到路由器中了<br><img src="https://ws1.sinaimg.cn/large/ba9cece1gy1fvd3fmmvafj20n20c8q3h.jpg" alt=""></p><p><strong>网络唤醒</strong>，选择相应的网卡地址点发送就行了<br><img src="https://ws1.sinaimg.cn/large/ba9cece1gy1fvd3gmcp38j20en0a3dfr.jpg" alt=""></p><p>优点：Win10自带Remote Desk使用体验极佳，由于是直连的，10ms级别的延迟几乎感觉不到是在使用远程桌面，需要时再开机，节约用电，减少安全隐患<br>缺点：有吗？</p><h4 id="路由器未刷机"><a href="#路由器未刷机" class="headerlink" title="路由器未刷机"></a>路由器未刷机</h4><p>没有各种强大功能的路由器，就需要自己手动进入路由器里面去配置了，我之前的路由器是腾达的，不能刷机，只能通过telnet进入，我还记得腾达那个中二的密码是Fireitup<br>windows的telnet默认是关闭的，需要手动去打开后才可以在cmd里使用telenet连接路由器的21端口<br>然后通过iptables来配置端口转发，这里就不详细写了<br>在过程中遇到了各种问题，比如路由器的系统是busybox，精简了很多命令，不能用curl,crontab等等，还有电脑关机超过几分钟后，路由器就丢掉了网卡的mac地址，需要手动保存arp映射表，否则端口转发了也无效等等问题<br>配置完成后可以通过手机app或者提供在线WOL服务的网页，向电脑的端口7发送唤醒包来开机，原理就是向端口7发送一个特殊格式的UDP报文来实现网络唤醒<br>后来我撸了一台斐讯的K2P刷了系统，刚下车不久，斐讯就翻车了，幸好。</p><p>优点：可以学习linux网络这块儿的部分知识<br>缺点：冷门的路由器，需要自己搜索相关的资料，可能会遇到各种不常见的问题，全靠自己解决</p><h4 id="DDNS"><a href="#DDNS" class="headerlink" title="DDNS"></a>DDNS</h4><p>虽然电信给了公网IP，但是每次光猫或者路由器重启，或者电信定期断开连接，导致宽带重新拨号后，公网IP就改变了，这时不知道新的IP就无法再使用远程开机<br>所以我们需要及时获取最新的IP，拿到了IP后，用邮件通知自己，同时也可以使用DDNS，即动态域名服务，在每次路由器的外网IP发生改变后，自动将域名解析到新的IP上，这样只需要记住固定的域名，就可以不用关心IP变成什么了，有了固定的域名还有个好处是可以在路由器或者自己的电脑上放个小网站之类的<br>DDNS可以使用市面上现有的产品，花生壳向日葵什么的，也可以自行实现，定时检测外网IP，发生改变后，调用域名服务商提供的API接口来修改域名解析<br>因为我不太会写shell脚本，路由器里也没有python环境，所以我把DDNS脚本放在了远程服务器，路由器里定时去访问，这里不介绍了，可以移步  <strong><a href="2018/06/18/K-python-1/">使用DNSPOD的API实现DDNS</a></strong></p><h3 id="有路由器管理权限，无公网IP"><a href="#有路由器管理权限，无公网IP" class="headerlink" title="有路由器管理权限，无公网IP"></a>有路由器管理权限，无公网IP</h3><p>这种情况和情况2唯一的区别是路由器外网没有公网IP，所以需要做一个内网穿透<br>使用方法和配置请移步  <strong><a href="2018/09/05/T-remote-0/">使用Frp实现内网穿透</a></strong><br>服务端需要一台有公网IP的服务器，或者使用别人提供的frp服务，配置完成后继续弄客户端<br>这里也分路由器已刷机和未刷机两种情况，刷了机的直接在网页上填配置，没刷机的自己下载Frp到路由器里，然后修改配置文件<br>到这一步，外网就可以访问路由器了，剩下的路由器配置端口转发的部分和情况2中的一致<br>以远程开机为例，大致的原理就是<br>本地电脑发送唤醒包→服务端口7→客户端（路由器）端口7→远程主机端口7→开机</p><p>优点: 因为自己的服务器公网IP不会经常改变，所以不需要再单独配置DDNS<br>缺点: 需要一台有公网IP的服务器，消耗自费流量，带宽受到服务器限制</p>]]></content>
      
      <categories>
          
          <category> 工具 </category>
          
          <category> 远程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RDP </tag>
            
            <tag> TeamViewer </tag>
            
            <tag> 端口转发 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用DNSPod的API实现DDNS</title>
      <link href="/2018/06/18/K-python-1/"/>
      <url>/2018/06/18/K-python-1/</url>
      <content type="html"><![CDATA[<h3 id="客户端（路由器）"><a href="#客户端（路由器）" class="headerlink" title="客户端（路由器）"></a>客户端（路由器）</h3><p>路由器上启动定时任务，每隔一段时间就访问一次服务器，把实时的外网IP地址告诉服务器，它的工作就完成了<br>我设置的是每五分钟请求一次<br><code>*/5 * * * * curl http://服务器地址:端口/ddns/all</code></p><h3 id="服务端（服务器）"><a href="#服务端（服务器）" class="headerlink" title="服务端（服务器）"></a>服务端（服务器）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding=utf-8 -*-</span><br><span class="line">from flask import Flask, request</span><br><span class="line">from flask_mail import Mail</span><br><span class="line">from flask_mail import Message</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"># 邮箱部分的配置，一般需要先去自己的邮箱里面开启SMTP服务，获取专门的密码等</span><br><span class="line">app.config[&apos;DEBUG&apos;] = True</span><br><span class="line">app.config[&apos;MAIL_SERVER&apos;] = &apos;smtp.qq.com&apos;</span><br><span class="line">app.config[&apos;MAIL_PORT&apos;] = 465</span><br><span class="line">app.config[&apos;MAIL_USE_TLS&apos;] = False</span><br><span class="line">app.config[&apos;MAIL_USE_SSL&apos;] = True</span><br><span class="line">app.config[&apos;MAIL_USERNAME&apos;] = &apos;hy@hiyagg.com&apos;  # 邮箱</span><br><span class="line">app.config[&apos;MAIL_PASSWORD&apos;] = &apos;********&apos;  # 密码</span><br><span class="line">mail = Mail(app)</span><br><span class="line"></span><br><span class="line">ip = &apos;1.1.1.1&apos;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@app.route(&apos;/ddns/&lt;event&gt;&apos;)</span><br><span class="line">def ddns(event):</span><br><span class="line">    global ip</span><br><span class="line">    ip_new = request.remote_addr  # 获取客户端ip地址</span><br><span class="line">    # 地址没变化就啥也不做，地址变了，根据url里的event来决定发邮件还是调api，我这里都要</span><br><span class="line">    if ip_new != ip:  </span><br><span class="line">        if event == &apos;api&apos;:</span><br><span class="line">            call_api(ip_new)</span><br><span class="line">        elif event == &apos;mail&apos;:</span><br><span class="line">            send_mail(ip_new)</span><br><span class="line">        elif event == &apos;all&apos;:</span><br><span class="line">            call_api(ip_new)</span><br><span class="line">            send_mail(ip_new)</span><br><span class="line">        else:</span><br><span class="line">            return &apos;error event&apos;</span><br><span class="line">        ip = ip_new</span><br><span class="line">        return &apos;hello, new ip: %s&apos; % ip</span><br><span class="line">    else:</span><br><span class="line">        return &apos;0&apos;</span><br><span class="line"></span><br><span class="line"># 发邮件</span><br><span class="line">def send_mail(ip_new):</span><br><span class="line">    msg = Message(subject=&apos;路由器ip地址变更通知&apos;, sender=&quot;hy@hiyagg.com&quot;, recipients=[&apos;收件人@qq.com&apos;]) </span><br><span class="line">    msg.body = &apos;最新的ip为：%s&apos; % ip_new</span><br><span class="line">    with app.app_context():</span><br><span class="line">        mail.send(msg)</span><br><span class="line"></span><br><span class="line"># 调DNSPod Api修改二级域名解析地址</span><br><span class="line">def call_api(ip_new):</span><br><span class="line">    postData = &#123;&apos;login_token&apos;:&apos;*my id*,*my token*&apos;,&apos;format&apos;:&apos;json&apos;,</span><br><span class="line">    &apos;domain_id&apos;:&apos;65560670&apos;,&apos;record_id&apos;:&apos;355103053&apos;,</span><br><span class="line">    &apos;record_line_id&apos;:&apos;0&apos;,&apos;sub_domain&apos;:&apos;home&apos;,&apos;value&apos;:&apos;&apos;&#125;</span><br><span class="line">    postData[&apos;value&apos;] = ip_new</span><br><span class="line">    response = requests.post(&apos;https://dnsapi.cn/Record.Ddns&apos;, data=postData)</span><br><span class="line">    print(response.text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    app.run(host=&apos;0.0.0.0&apos;)  # 端口默认是5000</span><br></pre></td></tr></table></figure><p>程序跑起来后，路由器外网IP一改变，微信上的邮件提醒就来了<br><img src="https://ws1.sinaimg.cn/large/ba9cece1gy1fve3x5iw4dj214018z0xu.jpg" alt=""><br>DNSPod里的二级域名解析也跟着变了<br><code>{&quot;status&quot;:{&quot;code&quot;:&quot;1&quot;,&quot;message&quot;:&quot;Action completed successful&quot;,&quot;created_at&quot;:&quot;2018-06-18 22:12:28&quot;},&quot;record&quot;:{&quot;id&quot;:355103053,&quot;name&quot;:&quot;home&quot;,&quot;value&quot;:&quot;113.88.98.86&quot;}}</code><br>这样就可以愉快的使用固定域名来访问家里的设备了</p>]]></content>
      
      <categories>
          
          <category> 知识 </category>
          
          <category> Python </category>
          
          <category> 自己的 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> DNSPod </tag>
            
            <tag> DDNS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>笔记之【Flask Web开发】</title>
      <link href="/2018/06/12/K-note-0/"/>
      <url>/2018/06/12/K-note-0/</url>
      <content type="html"><![CDATA[]]></content>
      
      <categories>
          
          <category> 知识 </category>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Flask </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python微信机器人</title>
      <link href="/2018/06/07/K-python-2/"/>
      <url>/2018/06/07/K-python-2/</url>
      <content type="html"><![CDATA[]]></content>
      
      <categories>
          
          <category> 知识 </category>
          
          <category> Python </category>
          
          <category> 自己的 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> wechatpy </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Mysql设置远程访问的权限</title>
      <link href="/2018/05/20/K-database-0/"/>
      <url>/2018/05/20/K-database-0/</url>
      <content type="html"><![CDATA[]]></content>
      
      <categories>
          
          <category> 知识 </category>
          
          <category> 数据库 </category>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Database </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>git日常操作</title>
      <link href="/2018/05/13/T-git-0/"/>
      <url>/2018/05/13/T-git-0/</url>
      <content type="html"><![CDATA[]]></content>
      
      <categories>
          
          <category> 工具 </category>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>杂记</title>
      <link href="/2018/05/01/L-things-0/"/>
      <url>/2018/05/01/L-things-0/</url>
      <content type="html"><![CDATA[]]></content>
      
      <categories>
          
          <category> 生活 </category>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 音乐 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>食记</title>
      <link href="/2018/05/01/L-cheese-0/"/>
      <url>/2018/05/01/L-cheese-0/</url>
      <content type="html"><![CDATA[]]></content>
      
      <categories>
          
          <category> 生活 </category>
          
          <category> 食记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 便当 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>个人常用的第三方库记录</title>
      <link href="/2018/04/20/K-python-0/"/>
      <url>/2018/04/20/K-python-0/</url>
      <content type="html"><![CDATA[]]></content>
      
      <categories>
          
          <category> 知识 </category>
          
          <category> Python </category>
          
          <category> 三方库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> uiautomator </tag>
            
            <tag> pyautogui </tag>
            
            <tag> pyinstaller </tag>
            
            <tag> xlrd/xlwt </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>计算机网络</title>
      <link href="/2018/04/14/K-network-0/"/>
      <url>/2018/04/14/K-network-0/</url>
      <content type="html"><![CDATA[]]></content>
      
      <categories>
          
          <category> 知识 </category>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
            <tag> TCP/IP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>花哨的终端</title>
      <link href="/2018/04/01/T-plugin-1/"/>
      <url>/2018/04/01/T-plugin-1/</url>
      <content type="html"><![CDATA[]]></content>
      
      <categories>
          
          <category> 工具 </category>
          
          <category> 插件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
            <tag> on my zsh </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>常用的shell命令记录</title>
      <link href="/2018/03/18/K-linux-0/"/>
      <url>/2018/03/18/K-linux-0/</url>
      <content type="html"><![CDATA[]]></content>
      
      <categories>
          
          <category> 知识 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
